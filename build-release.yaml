variables :
  - name: 'configuration'
    value: 'Release'
  - name: 'Parameters.projects'
    value: '**/*.csproj'
  - name: 'Parameters.projects.tests'
    value: '**/*Tests/*.csproj'
  - name: 'majorVersion'
    value: '1'
  - name: 'minorVersion'
    value: '0'
  - name: 'patchVersion'
    value: '0'
  - name : 'projectName'
    value: 'Queries'
  - name: 'azureArtifactFeed'
    value: 'Queries'
  - group: Security

pr:
  - master

trigger:
  batch: true
  branches:
   include:
      - master
      - features/*
      - fixes/*
  paths:
   exclude:
     - '**/*.md'

pool:
  vmImage : windows-latest
#Your build pipeline references a secret variable named ‘github.apiKey’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
        
steps:
- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: restore
    projects: '$(Parameters.projects)'
    feedsToUse: config
    nugetConfigPath: Nuget.config
    verbosityRestore: Normal

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    projects: '$(Parameters.projects)'
    arguments: '--no-restore -c $(configuration)'

- task: DotNetCoreCLI@2
  displayName: 'Run tests and collect code coverage'
  inputs:
    command: test
    projects: '$(Parameters.projects.tests)'
    arguments: '--no-build -c $(configuration) /p:CoverletOutput=$(Agent.TempDirectory)\ /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

- task: DotNetCoreCLI@2
  inputs:
    command: custom
    custom: tool
    arguments: install -g dotnet-reportgenerator-globaltool --ignore-failed-sources
  displayName: Install ReportGenerator tool
  
- script: reportgenerator -reports:$(Agent.TempDirectory)\**\coverage.*.cobertura.xml -targetdir:$(Build.SourcesDirectory)\coverlet\reports -reporttypes:"Cobertura"
  displayName: Create reports
  
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(Build.SourcesDirectory)\coverlet\reports\Cobertura.xml  

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack'
  inputs:
    command: pack
    nobuild: true
    versioningScheme: byPrereleaseNumber
    majorVersion: '$(majorVersion)'
    minorVersion: '$(minorVersion)'
    patchVersion: '$(patchVersion)'
  condition: succeededOrFailed()

# the following step sync the repo with the Github repo
- task: nkdagility.gittasks.gitsync-task.gitsync@1
  displayName: 'Git Publish to https://$(github.apiKey)@github.com/candoumbe/$(projectName).git'
  inputs:
    GitRepoUrl: 'https://$(github.apiKey)@github.com/candoumbe/$(projectName).git'
  condition: succeededOrFailed()
  enabled: false

- task: DotNetCoreCLI@2
  displayName: 'dotnet push'
  inputs:
    command: push
    publishVstsFeed: '$(azureArtifactFeed)'
  enabled: true